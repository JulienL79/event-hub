upstream backend_server {
    # 127.0.0.11 est l'adresse DNS interne du réseau Docker. 
    # 'valid=30s' indique à Nginx de mettre en cache la résolution pendant 30 secondes.
    resolver 127.0.0.11 valid=30s; 
    
    # 'backend:3000' est le nom du service Docker Compose et son port interne.
    server backend:3000; 
}

server {
    # Port sur lequel Nginx écoute, accessible depuis l'extérieur du conteneur
    listen 80;

    # Le nom de domaine ou l'adresse IP pour lequel le serveur est confi guré
    server_name localhost; 
    
    # --- SECTION 1 : Reverse Proxy vers l'API Backend ---
    
    # Toutes les requêtes qui commencent par /api/ (par exemple, /api/events)
    location /api/ {
        # Défi nit le service Docker du backend comme destination
        # Remplacez 'backend:3000' par le nom et le port de votre service Docker Backend
        proxy_pass http://backend_server; 
        
        # En-têtes essentiels pour transmettre l'IP réelle du client et le Host
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # --- SECTION 2 : Servir le Frontend React (Fichiers Statiques) ---
    
    # Chemin où les fichiers statiques de React (le build) sont copiés dans le conteneur Nginx
    # Assurez-vous que votre Dockerfile Nginx copie le dossier 'build' du Frontend ici.
    root /usr/share/nginx/html; 

    # Fichier par défaut à servir
    index index.html index.htm;
    
    # --- SECTION 3 : Gérer le Routage React Côté Client ---
    
    # Toutes les autres requêtes (non API) sont traitées ici.
    location / {
        # 1. Essayer le chemin exact ($uri),
        # 2. Essayer le chemin en tant que répertoire ($uri/),
        # 3. Si les deux échouent, servir /index.html pour laisser React Router prendre le relais.
        try_files $uri $uri/ /index.html;
    }

    # Bloquer les accès aux fichiers cachés
    location ~ /\. {
        deny all;
    }
}